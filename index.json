{
  "api/XRC.Core.CommandBase.html": {
    "href": "api/XRC.Core.CommandBase.html",
    "title": "Class CommandBase | XRC Core",
    "keywords": "Class CommandBase Provides an abstract base class for commands that implement the ICommand ICommand interface. Inheritance Object CommandBase Implements ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public abstract class CommandBase : ICommand Fields m_isExecuted Flag indicating whether the command has been executed or not Declaration protected bool m_isExecuted Field Value Type Description Boolean Methods CombineWithNext(ICommand) Abstract method to combine the current command with the next command Declaration public abstract bool CombineWithNext(ICommand p_nextCmd) Parameters Type Name Description ICommand p_nextCmd Returns Type Description Boolean Execute() Method to execute the command Declaration public virtual bool Execute() Returns Type Description Boolean GetStoredBytes() Abstract method to get the size in bytes of the command's stored data Declaration public abstract long GetStoredBytes() Returns Type Description Int64 Rollback() Method to rollback the changes made by the command Declaration public virtual bool Rollback() Returns Type Description Boolean Implements ICommand"
  },
  "api/XRC.Core.CommandManager.html": {
    "href": "api/XRC.Core.CommandManager.html",
    "title": "Class CommandManager | XRC Core",
    "keywords": "Class CommandManager Manages the execution, undo, and redo of commands in the application. Commands must inherit from the ICommand interface. ICommand Inheritance Object CommandManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class CommandManager Properties Instance Declaration public static CommandManager Instance { get; } Property Value Type Description CommandManager IsDestroyedOnSceneLoad Gets or sets a value indicating whether the CommandManager is destroyed when a new scene is loaded CommandManager . Usese the UtilityOnDestroyHandler to notify other game objects of Destroy events and resets the CommandManager. UtilityOnDestroyHandler Declaration public bool IsDestroyedOnSceneLoad { get; set; } Property Value Type Description Boolean IsRedoable Gets a value indicating whether there are redoable commands. Declaration public bool IsRedoable { get; } Property Value Type Description Boolean IsUndoable Gets a value indicating whether there are undoable commands. Declaration public bool IsUndoable { get; } Property Value Type Description Boolean StoredBytes Gets the total amount of memory used to store command data. Declaration public long StoredBytes { get; } Property Value Type Description Int64 StoredBytesLimit Gets or sets the maximum amount of memory that can be used to store command data. Declaration public long StoredBytesLimit { get; set; } Property Value Type Description Int64 Methods Add(ICommand, Boolean) Adds a command to the command manager. Declaration public void Add(ICommand p_cmd, bool p_isAlreadyExecuted) Parameters Type Name Description ICommand p_cmd The command to add. Boolean p_isAlreadyExecuted Indicates whether the command has already been executed. Execute(ICommand) Executes a command and adds it to the command manager. Declaration public void Execute(ICommand p_cmd) Parameters Type Name Description ICommand p_cmd The command to execute. Redo() Redoes the last undone command. Declaration public bool Redo() Returns Type Description Boolean True if the redo was successful, false otherwise. Reset() Resets the command manager, clearing all commands. Declaration public void Reset() Undo() Undoes the last executed command. Declaration public bool Undo() Returns Type Description Boolean True if the undo was successful, false otherwise."
  },
  "api/XRC.Core.html": {
    "href": "api/XRC.Core.html",
    "title": "Namespace XRC.Core | XRC Core",
    "keywords": "Namespace XRC.Core Classes CommandBase Provides an abstract base class for commands that implement the ICommand ICommand interface. CommandManager Manages the execution, undo, and redo of commands in the application. Commands must inherit from the ICommand interface. ICommand MonoBehaviourSingleton<T> MonoBehaviourSingletonPersistent<T> PoseMarker Represents a pose marker in the scene that visualizes the pose in 3D space. UtilityOnDestroyHandler The code defines a class named UtilityOnDestroyHandler that inherits from MonoBehaviour, which means it can be attached to a GameObject in Unity. The class has two member variables: m_isHandlingDisabled: A boolean flag that indicates whether the handling is disabled. It is initially set to false. m_onDestroy: An Action delegate that represents the action to be executed on destroy. It is initially set to null. The class has a method named DestroyWithoutHandling that can be called to destroy the object without executing the destroy action. It performs the following steps: Sets the m_isHandlingDisabled flag to true, indicating that handling is disabled. Sets the m_onDestroy action to null, effectively clearing the destroy action. Calls Destroy(this) to destroy the object. The class also has the OnDestroy method, which is a Unity callback that gets triggered when the object is being destroyed. It performs the following steps: Checks if the m_onDestroy action is set to a non-null value. If the m_onDestroy action is not null, it invokes the action, executing the destroy logic. If the m_onDestroy action is null and the m_isHandlingDisabled flag is false, it logs an error message to the Unity console using Debug.LogError. This error message indicates that the destroy handler was not set properly. Overall, this code provides a utility class that allows you to handle object destruction with a custom action. It provides a way to disable the destroy handling temporarily and also handles cases where the destroy action is not set properly, logging an error in such situations. Interfaces ICommand An interface for implementing cammands using the command pattern."
  },
  "api/XRC.Core.ICommand.html": {
    "href": "api/XRC.Core.ICommand.html",
    "title": "Interface ICommand | XRC Core",
    "keywords": "Interface ICommand An interface for implementing cammands using the command pattern. Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public interface ICommand Methods CombineWithNext(ICommand) Method to combine the current command with the next command Declaration bool CombineWithNext(ICommand p_nextCmd) Parameters Type Name Description ICommand p_nextCmd Returns Type Description Boolean Execute() Method to execute the command Declaration bool Execute() Returns Type Description Boolean GetStoredBytes() Method to get the size in bytes of the command's stored data Declaration long GetStoredBytes() Returns Type Description Int64 Returns the number of stored bytes. Rollback() Method to rollback the changes made by the command Declaration bool Rollback() Returns Type Description Boolean"
  },
  "api/XRC.Core.MonoBehaviourSingleton-1.html": {
    "href": "api/XRC.Core.MonoBehaviourSingleton-1.html",
    "title": "Class MonoBehaviourSingleton<T> | XRC Core",
    "keywords": "Class MonoBehaviourSingleton<T> Inheritance Object MonoBehaviourSingleton<T> Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class MonoBehaviourSingleton<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties Instance Gets the instance of the singleton. Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/XRC.Core.MonoBehaviourSingletonPersistent-1.html": {
    "href": "api/XRC.Core.MonoBehaviourSingletonPersistent-1.html",
    "title": "Class MonoBehaviourSingletonPersistent<T> | XRC Core",
    "keywords": "Class MonoBehaviourSingletonPersistent<T> Inheritance Object MonoBehaviourSingletonPersistent<T> Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class MonoBehaviourSingletonPersistent<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods Awake() Declaration public virtual void Awake()"
  },
  "api/XRC.Core.PoseMarker.html": {
    "href": "api/XRC.Core.PoseMarker.html",
    "title": "Class PoseMarker | XRC Core",
    "keywords": "Class PoseMarker Represents a pose marker in the scene that visualizes the pose in 3D space. Inheritance Object PoseMarker Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class PoseMarker : MonoBehaviour Methods HidePoseMarker() Hides the pose marker by disabling the necessary game objects. Declaration public void HidePoseMarker() ShowPoseMarker() Shows the pose marker by enabling the necessary game objects. Declaration public void ShowPoseMarker()"
  },
  "api/XRC.Core.UtilityOnDestroyHandler.html": {
    "href": "api/XRC.Core.UtilityOnDestroyHandler.html",
    "title": "Class UtilityOnDestroyHandler | XRC Core",
    "keywords": "Class UtilityOnDestroyHandler The code defines a class named UtilityOnDestroyHandler that inherits from MonoBehaviour, which means it can be attached to a GameObject in Unity. The class has two member variables: m_isHandlingDisabled: A boolean flag that indicates whether the handling is disabled. It is initially set to false. m_onDestroy: An Action delegate that represents the action to be executed on destroy. It is initially set to null. The class has a method named DestroyWithoutHandling that can be called to destroy the object without executing the destroy action. It performs the following steps: Sets the m_isHandlingDisabled flag to true, indicating that handling is disabled. Sets the m_onDestroy action to null, effectively clearing the destroy action. Calls Destroy(this) to destroy the object. The class also has the OnDestroy method, which is a Unity callback that gets triggered when the object is being destroyed. It performs the following steps: Checks if the m_onDestroy action is set to a non-null value. If the m_onDestroy action is not null, it invokes the action, executing the destroy logic. If the m_onDestroy action is null and the m_isHandlingDisabled flag is false, it logs an error message to the Unity console using Debug.LogError. This error message indicates that the destroy handler was not set properly. Overall, this code provides a utility class that allows you to handle object destruction with a custom action. It provides a way to disable the destroy handling temporarily and also handles cases where the destroy action is not set properly, logging an error in such situations. Inheritance Object UtilityOnDestroyHandler Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class UtilityOnDestroyHandler : MonoBehaviour Fields m_onDestroy Declaration public Action m_onDestroy Field Value Type Description Action Methods DestroyWithoutHandling() Declaration public void DestroyWithoutHandling()"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | XRC Core",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . <!-- Headers should be listed in this order: Added, Changed, Deprecated, Removed, Fixed, Security --> [0.1.1] - 2023-07-24 Added Added PoseMarker prefab from OpenXR Plugin. https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html [0.1.0] - 2023-07-20 Added Basic Patterns, including Command pattern, Singleton pattern, and Observer pattern. Changed N/A Deprecated N/A Removed List removed features Fixed N/A Security N/A"
  },
  "index.html": {
    "href": "index.html",
    "title": "XRC Core | XRC Core",
    "keywords": "XRC Core Overview <!-- Provide a brief, high-level explanation of the package.--> The XRC Core package is a comprehensive collection of resources, utilities, and design patterns that serve as the foundation for all XRC packages within the Unity development environment. It provides developers with a core set of tools to streamline the creation of immersive experiences and applications. By leveraging the XRC Core package, developers can benefit from a unified and cohesive toolkit, simplifying the development process, accelerating iteration cycles, and ultimately delivering polished and immersive experiences to their end users. Package contents <!-- Include the location of important files you want the user to know about. For example, if this is a sample package containing textures, models, and materials separated by sample group, you might want to provide the folder location of each group.--> These directories, along with their respective files, are strategically organized within the XRC Core package to provide developers with a structured and accessible resource for XR development. Navigating these directories will grant developers access to a wealth of design patterns and tools that streamline the development process and enhance the overall quality of XR experiences. Here are some of the important files and their respective locations within the package: Patterns Singleton The Singleton pattern is a creational design pattern that ensures the existence of only one instance of a class and provides a global point of access to it. In Unity scripting, the Singleton pattern is commonly used to manage resources, data, or systems that should have a single, centralized instance throughout the lifespan of the application. Observer The Observer pattern is a behavioral design pattern that establishes a one-to-many relationship between objects. In this pattern, when the state of one object (called the subject) changes, all its dependent objects (called observers) are automatically notified and updated. In Unity scripting, the Observer pattern is commonly used to implement event-driven systems, allowing objects to react and respond to changes or events in a decoupled and flexible manner. Command In Unity, the Command pattern is particularly useful for implementing features like undo and redo functionality, input handling, AI behavior, and more. It helps organize and manage complex interactions by separating the requester, the controller, and the executor (command object) of an operation. Utilities PoseMarker PoseMarker, which assists in visualizing transforms and tracking object positions within a scene. This feature greatly facilitates the precise placement and manipulation of objects, contributing to a more efficient development process. <!-- Furthermore, the package incorporates essential math classes that enable complex calculations and operations commonly required in virtual reality and augmented reality applications. These math classes encompass vector and quaternion math, projective geometry, meshes, and other useful scripts, empowering developers to implement advanced visual and spatial computations effortlessly. Runtime - Patterns: This directory houses a comprehensive collection of game design patterns commonly employed in XR development. These patterns serve as reusable templates and methodologies that enhance code organization, maintainability, and extensibility. Developers can find a variety of patterns, such as the Singleton pattern, Observer pattern, State pattern, and more, within this directory. Runtime - Patterns - Command: Within the Patterns directory, the Command subdirectory specifically focuses on the Command pattern. The Command pattern is particularly useful for implementing Undo/Redo command operations. By encapsulating actions or operations into separate command objects, developers can easily track and execute these commands, enabling efficient undo and redo functionality in their XR applications. --> Installation instructions <!-- You can point to the official Package Manager installation instructions, but if you have any special installation requirements, such as installing samples, add them here. --> Use the Unity Package Manager (in Unity’s top menu: Window > Package Manager ) to view which packages are available for installation or already installed in your Project. In addition, you can use this window to see which versions are available, and install, remove, disable, or update packages for each Project. To install using git url, click on the + icon in the top left corner of the Package Manager window. Then select Add package from git URL... and paste the following URL. https://github.com/xrcollaboratory/edu.cornell.xrc.core.git From the package window, you will see the package name, it's description, and a dropdown menu for Samples . Import any Samples that are useful for your project for examples on how the package can be used. Requirements <!-- This is a good place to add hardware or software requirements, including which versions of the Unity Editor this package is compatible with. --> XRC.Core package should work with most versions of Unity. It has been tested on versions 2021.3 and above. <!-- ## Limitations If your package has any known limitations, you can list them here. If not, or if the limitations are trivial, exclude this section. --> Workflows <!-- Include a list of steps that the user can easily follow that demonstrates how to use the feature. You can include screenshots to help describe how to use the feature. --> In most cases, you will not need to modify scripts within XRC.Core. Any files in the Package directory are set to Read Only and therefore should not be modified. The recommended workflow is to extend existing classes rather than modify them. This can be done by inheritance or composition. <!-- ## Advanced topics This is where you can provide detailed information about what you are providing to users. This is ideal if you don’t want to overwhelm the user with too much information up front. ## Reference <!-- If you have a user interface with a lot of properties, you can provide the details in a reference section. Using tables is a good way to provide quick access to specific property descriptions. --> Samples <!-- For packages that include sample files, you can include detailed information on how the user can use these sample files in their projects and scenes.--> StarterAssets The Starter Assets that offer a range of pre-built components, materials, models, prefabs, and scenes. These assets provide a solid starting point for building virtual environments, saving developers valuable time and effort in the initial setup process. <!-- ## Tutorials If you want to provide walkthroughs for complicated procedures, you can also add them here. Use step-by-step instructions and include images if they can help the user understand. -->"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| XRC Core",
    "keywords": "MIT License Copyright (c) 2023 XR Collaboratory Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "license/Third Party Notices.html": {
    "href": "license/Third Party Notices.html",
    "title": "This package contains third-party software components governed by the license(s) indicated below: | XRC Core",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: None"
  }
}