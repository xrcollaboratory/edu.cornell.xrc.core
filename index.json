{
  "api/XRC.Core.EditObjectProvider.html": {
    "href": "api/XRC.Core.EditObjectProvider.html",
    "title": "Class EditObjectProvider | XRC Core",
    "keywords": "Class EditObjectProvider EditObjectProvider is a MonoBehaviour that provides functionality to select and interact with a target object. Inheritance Object EditObjectProvider Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class EditObjectProvider : MonoBehaviour Remarks This component is used in edit tools that implement the IEditTool interface, such as XRC Mesh Tool, XRC Scale Tool, and XRC Color Tool, for providing the game object to be edited. Properties editObject The object being edited. Anytime this property is set, the editObject of the EditTool is also set. Declaration public GameObject editObject { get; set; } Property Value Type Description GameObject interactor The interactor responsible for selecting the object to be interested. Declaration public XRBaseInteractor interactor { get; set; } Property Value Type Description XRBaseInteractor isRunning Indicates whether the tool is currently running or not. Declaration public bool isRunning { get; set; } Property Value Type Description Boolean Methods StartRun() Start the edit tool and provide the edit object based on the recently selected interactable. If the SnapBack property is set to true, the object will be moved back to its grabbed position and orientation. If the StartEditOnSet property is set to true, the edit tool will be started immediately after the object has been set. Declaration public void StartRun() StopRun() Remove the edit object from the edit tool and enables the interactable so it can be selected again. Stops the run on the edit tool. Declaration public void StopRun() ToggleRun() Toggles the run condition of the edit tool. Declaration public void ToggleRun()"
  },
  "api/XRC.Core.html": {
    "href": "api/XRC.Core.html",
    "title": "Namespace XRC.Core | XRC Core",
    "keywords": "Namespace XRC.Core Classes EditObjectProvider EditObjectProvider is a MonoBehaviour that provides functionality to select and interact with a target object. Interfaces IEditTool An interface to be implemented by edit tools that require an object to edit. IRunnable Interface to be implemented by components, such as edit tools and interaction techniques, that have a distinct run condition. A run condition is where the tool, or technique, execute its primary tasks."
  },
  "api/XRC.Core.IEditTool.html": {
    "href": "api/XRC.Core.IEditTool.html",
    "title": "Interface IEditTool | XRC Core",
    "keywords": "Interface IEditTool An interface to be implemented by edit tools that require an object to edit. Inherited Members IRunnable.isRunning IRunnable.StartRun() IRunnable.StopRun() IRunnable.ToggleRun() Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public interface IEditTool : IRunnable Properties editObject The object to be edited by the tool. Declaration GameObject editObject { get; set; } Property Value Type Description GameObject"
  },
  "api/XRC.Core.IRunnable.html": {
    "href": "api/XRC.Core.IRunnable.html",
    "title": "Interface IRunnable | XRC Core",
    "keywords": "Interface IRunnable Interface to be implemented by components, such as edit tools and interaction techniques, that have a distinct run condition. A run condition is where the tool, or technique, execute its primary tasks. Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public interface IRunnable Remarks An example of a tool with a run condition is the XRC Color Tool, which is running when an object's color is being updated by the tool. Properties isRunning Whether the tool is running or not. Declaration bool isRunning { get; } Property Value Type Description Boolean Methods StartRun() Start running the tool. Declaration void StartRun() StopRun() End running the tool. Declaration void StopRun() ToggleRun() Toggle the tool. Declaration void ToggleRun()"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | XRC Core",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . <!-- Headers should be listed in this order: Added, Changed, Deprecated, Removed, Fixed, Security --> [0.1.3] - 2023-10-12 Changed Updated documentation Changed scale of PoseMarker prefab [0.1.2] - 2023-07-26 Added Added dependency on XR Interaction Toolkit. Samples currently depend on XRI, and runtime scripts will also have a dependency on XRI. Changed Changed sample folder name and sample scene name Removed Event System from sample scene and rearranged scene hierarchy [0.1.1] - 2023-07-24 Added Added PoseMarker prefab from OpenXR Plugin. https://docs.unity3d.com/Packages/com.unity.xr.openxr@1.8/manual/index.html [0.1.0] - 2023-07-20 Added Basic Patterns, including Command pattern, Singleton pattern, and Observer pattern. Changed N/A Deprecated N/A Removed List removed features Fixed N/A Security N/A"
  },
  "index.html": {
    "href": "index.html",
    "title": "XRC Core | XRC Core",
    "keywords": "XRC Core Overview <!-- Provide a brief, high-level explanation of the package.--> The XRC Core package is a utility package that serves as the foundation for other XRC packages. It provides XRC developers with a core set of tools to streamline the creation of applications, by simplifying the development process and accelerating iteration cycles. Installation instructions Package Manager To install this package, follow these steps: In the Unity Editor, click on Window > Package Manager Click the + button and choose Add package from git URL option Paste this URL https://github.com/xrcollaboratory/edu.cornell.xrc.core.git in the prompt and click on Add If the package is private you might have to authenticate, if you have been granted access to this package The package should be installed into your project You can download Samples from under Samples in Package Manager Requirements <!-- This is a good place to add hardware or software requirements, including which versions of the Unity Editor this package is compatible with. --> This package has been tested using Unity Editor 2022.3.7f1 (LTS). Dependencies: XR Interaction Toolkit, Input System. <!-- ## Limitations If your package has any known limitations, you can list them here. If not, or if the limitations are trivial, exclude this section. --> Workflows <!-- Include a list of steps that the user can easily follow that demonstrates how to use the feature. You can include screenshots to help describe how to use the feature. --> Currently, the primary use case for this package is to use the prefabs that are distributed via the package samples, see below. <!-- ## Advanced topics This is where you can provide detailed information about what you are providing to users. This is ideal if you donâ€™t want to overwhelm the user with too much information up front. --> <!-- ## Reference If you have a user interface with a lot of properties, you can provide the details in a reference section. Using tables is a good way to provide quick access to specific property descriptions. --> Samples <!-- For packages that include sample files, you can include detailed information on how the user can use these sample files in their projects and scenes.--> XRC Starter Assets This sample offers a range of materials, models, prefabs, scenes, and other assets that are not shipped with the runtime package scripts. These assets provide a starting point for building virtual environments, saving developers time and effort during the initial setup process. PlayArea This prefab can be used as a standardized scene environment across different projects. See sample scene for usage example. PoseMarker This prefab can be used to indicate a pose of an object by placing it as a child of the object. See sample scene for usage example. <!-- ## Tutorials If you want to provide a walkthrough for a complicated procedure, you can also add them here. Use step-by-step instructions and include images if they can help the user understand. -->"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| XRC Core",
    "keywords": "MIT License Copyright (c) 2023 XR Collaboratory Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "license/Third Party Notices.html": {
    "href": "license/Third Party Notices.html",
    "title": "This package contains third-party software components governed by the license(s) indicated below: | XRC Core",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: None"
  }
}