{
  "api/XRC.Core.CommandBase.html": {
    "href": "api/XRC.Core.CommandBase.html",
    "title": "Class CommandBase | <XRC Package Template>",
    "keywords": "Class CommandBase Provides an abstract base class for commands that implement the ICommand interface. Inheritance Object CommandBase Implements ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public abstract class CommandBase : ICommand Fields m_isExecuted Flag indicating whether the command has been executed or not Declaration protected bool m_isExecuted Field Value Type Description Boolean Methods CombineWithNext(ICommand) Abstract method to combine the current command with the next command Declaration public abstract bool CombineWithNext(ICommand p_nextCmd) Parameters Type Name Description ICommand p_nextCmd Returns Type Description Boolean Execute() Method to execute the command Declaration public virtual bool Execute() Returns Type Description Boolean GetStoredBytes() Abstract method to get the size in bytes of the command's stored data Declaration public abstract long GetStoredBytes() Returns Type Description Int64 Rollback() Method to rollback the changes made by the command Declaration public virtual bool Rollback() Returns Type Description Boolean Implements ICommand"
  },
  "api/XRC.Core.CommandManager.html": {
    "href": "api/XRC.Core.CommandManager.html",
    "title": "Class CommandManager | <XRC Package Template>",
    "keywords": "Class CommandManager Manages the execution, undo, and redo of commands in the application. Inheritance Object CommandManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class CommandManager Properties Instance Declaration public static CommandManager Instance { get; } Property Value Type Description CommandManager IsDestroyedOnSceneLoad Gets or sets a value indicating whether the CommandManager is destroyed when a new scene is loaded. Declaration public bool IsDestroyedOnSceneLoad { get; set; } Property Value Type Description Boolean IsRedoable Gets a value indicating whether there are redoable commands. Declaration public bool IsRedoable { get; } Property Value Type Description Boolean IsUndoable Gets a value indicating whether there are undoable commands. Declaration public bool IsUndoable { get; } Property Value Type Description Boolean StoredBytes Gets the total amount of memory used to store command data. Declaration public long StoredBytes { get; } Property Value Type Description Int64 StoredBytesLimit Gets or sets the maximum amount of memory that can be used to store command data. Declaration public long StoredBytesLimit { get; set; } Property Value Type Description Int64 Methods Add(ICommand, Boolean) Adds a command to the command manager. Declaration public void Add(ICommand p_cmd, bool p_isAlreadyExecuted) Parameters Type Name Description ICommand p_cmd The command to add. Boolean p_isAlreadyExecuted Indicates whether the command has already been executed. Execute(ICommand) Executes a command and adds it to the command manager. Declaration public void Execute(ICommand p_cmd) Parameters Type Name Description ICommand p_cmd The command to execute. Redo() Redoes the last undone command. Declaration public bool Redo() Returns Type Description Boolean True if the redo was successful, false otherwise. Reset() Resets the command manager, clearing all commands. Declaration public void Reset() Undo() Undoes the last executed command. Declaration public bool Undo() Returns Type Description Boolean True if the undo was successful, false otherwise."
  },
  "api/XRC.Core.html": {
    "href": "api/XRC.Core.html",
    "title": "Namespace XRC.Core | <XRC Package Template>",
    "keywords": "Namespace XRC.Core Classes CommandBase Provides an abstract base class for commands that implement the ICommand interface. CommandManager Manages the execution, undo, and redo of commands in the application. MonoBehaviourSingleton<T> MonoBehaviourSingleton is a generic base class for creating MonoBehaviour singletons. The generic type T represents the type of the singleton component. The class provides a static property Instance that allows access to the singleton instance. The Instance property utilizes lazy initialization to create and return the singleton instance.If the _instance variable is null, it searches for objects of type T in the scene using FindObjectsOfType.If there is only one instance found, it assigns it to _instance.If there are more than one instances found, it logs an error.If no instance is found, it creates a new GameObject and adds the component T to it.The new GameObject is set to be hidden and not saved in the scene.Finally, it assigns the component to _instance and returns it. The purpose of this class is to ensure that only one instance of the specified component type exists in the scene at any given time. MonoBehaviourSingletonPersistent<T> PoseMarker Represents a pose marker in the scene that visualizes the pose in 3D space. StudentSubmissionSettings Represents the settings for a student submission. UtilityOnDestroyHandler The code defines a class named UtilityOnDestroyHandler that inherits from MonoBehaviour, which means it can be attached to a GameObject in Unity. The class has two member variables: m_isHandlingDisabled: A boolean flag that indicates whether the handling is disabled. It is initially set to false. m_onDestroy: An Action delegate that represents the action to be executed on destroy. It is initially set to null. The class has a method named DestroyWithoutHandling that can be called to destroy the object without executing the destroy action. It performs the following steps: Sets the m_isHandlingDisabled flag to true, indicating that handling is disabled. Sets the m_onDestroy action to null, effectively clearing the destroy action. Calls Destroy(this) to destroy the object. The class also has the OnDestroy method, which is a Unity callback that gets triggered when the object is being destroyed. It performs the following steps: Checks if the m_onDestroy action is set to a non-null value. If the m_onDestroy action is not null, it invokes the action, executing the destroy logic. If the m_onDestroy action is null and the m_isHandlingDisabled flag is false, it logs an error message to the Unity console using Debug.LogError. This error message indicates that the destroy handler was not set properly. Overall, this code provides a utility class that allows you to handle object destruction with a custom action. It provides a way to disable the destroy handling temporarily and also handles cases where the destroy action is not set properly, logging an error in such situations. Interfaces ICommand An interface for implementing cammands using the command pattern."
  },
  "api/XRC.Core.ICommand.html": {
    "href": "api/XRC.Core.ICommand.html",
    "title": "Interface ICommand | <XRC Package Template>",
    "keywords": "Interface ICommand An interface for implementing cammands using the command pattern. Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public interface ICommand Methods CombineWithNext(ICommand) Method to combine the current command with the next command Declaration bool CombineWithNext(ICommand p_nextCmd) Parameters Type Name Description ICommand p_nextCmd Returns Type Description Boolean Execute() Method to execute the command Declaration bool Execute() Returns Type Description Boolean GetStoredBytes() Method to get the size in bytes of the command's stored data Declaration long GetStoredBytes() Returns Type Description Int64 Returns the number of stored bytes. Rollback() Method to rollback the changes made by the command Declaration bool Rollback() Returns Type Description Boolean"
  },
  "api/XRC.Core.MonoBehaviourSingleton-1.html": {
    "href": "api/XRC.Core.MonoBehaviourSingleton-1.html",
    "title": "Class MonoBehaviourSingleton<T> | <XRC Package Template>",
    "keywords": "Class MonoBehaviourSingleton<T> MonoBehaviourSingleton is a generic base class for creating MonoBehaviour singletons. The generic type T represents the type of the singleton component. The class provides a static property Instance that allows access to the singleton instance. The Instance property utilizes lazy initialization to create and return the singleton instance.If the _instance variable is null, it searches for objects of type T in the scene using FindObjectsOfType.If there is only one instance found, it assigns it to _instance.If there are more than one instances found, it logs an error.If no instance is found, it creates a new GameObject and adds the component T to it.The new GameObject is set to be hidden and not saved in the scene.Finally, it assigns the component to _instance and returns it. The purpose of this class is to ensure that only one instance of the specified component type exists in the scene at any given time. Inheritance Object MonoBehaviourSingleton<T> Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class MonoBehaviourSingleton<T> : MonoBehaviour where T : Component Type Parameters Name Description T The type of the singleton component. Properties Instance Gets the instance of the singleton. Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/XRC.Core.MonoBehaviourSingletonPersistent-1.html": {
    "href": "api/XRC.Core.MonoBehaviourSingletonPersistent-1.html",
    "title": "Class MonoBehaviourSingletonPersistent<T> | <XRC Package Template>",
    "keywords": "Class MonoBehaviourSingletonPersistent<T> Inheritance Object MonoBehaviourSingletonPersistent<T> Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class MonoBehaviourSingletonPersistent<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods Awake() Declaration public virtual void Awake()"
  },
  "api/XRC.Core.PoseMarker.html": {
    "href": "api/XRC.Core.PoseMarker.html",
    "title": "Class PoseMarker | <XRC Package Template>",
    "keywords": "Class PoseMarker Represents a pose marker in the scene that visualizes the pose in 3D space. Inheritance Object PoseMarker Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class PoseMarker : MonoBehaviour Methods HidePoseMarker() Hides the pose marker by disabling the necessary game objects. Declaration public void HidePoseMarker() ShowPoseMarker() Shows the pose marker by enabling the necessary game objects. Declaration public void ShowPoseMarker()"
  },
  "api/XRC.Core.StudentSubmissionSettings.html": {
    "href": "api/XRC.Core.StudentSubmissionSettings.html",
    "title": "Class StudentSubmissionSettings | <XRC Package Template>",
    "keywords": "Class StudentSubmissionSettings Represents the settings for a student submission. Inheritance Object StudentSubmissionSettings Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class StudentSubmissionSettings : ScriptableObject Fields apkURL Declaration public string apkURL Field Value Type Description String firstName Declaration public string firstName Field Value Type Description String ID Declaration public string ID Field Value Type Description String lastName DO NOT MODIFY THIS SCRIPT Declaration public string lastName Field Value Type Description String m_AppIdentifier Declaration public string m_AppIdentifier Field Value Type Description String m_CompName Declaration public string m_CompName Field Value Type Description String m_ProdName Declaration public string m_ProdName Field Value Type Description String repoURL Declaration public string repoURL Field Value Type Description String Username Declaration public string Username Field Value Type Description String videoURL Declaration public string videoURL Field Value Type Description String workSummary Declaration public string workSummary Field Value Type Description String"
  },
  "api/XRC.Core.UtilityOnDestroyHandler.html": {
    "href": "api/XRC.Core.UtilityOnDestroyHandler.html",
    "title": "Class UtilityOnDestroyHandler | <XRC Package Template>",
    "keywords": "Class UtilityOnDestroyHandler The code defines a class named UtilityOnDestroyHandler that inherits from MonoBehaviour, which means it can be attached to a GameObject in Unity. The class has two member variables: m_isHandlingDisabled: A boolean flag that indicates whether the handling is disabled. It is initially set to false. m_onDestroy: An Action delegate that represents the action to be executed on destroy. It is initially set to null. The class has a method named DestroyWithoutHandling that can be called to destroy the object without executing the destroy action. It performs the following steps: Sets the m_isHandlingDisabled flag to true, indicating that handling is disabled. Sets the m_onDestroy action to null, effectively clearing the destroy action. Calls Destroy(this) to destroy the object. The class also has the OnDestroy method, which is a Unity callback that gets triggered when the object is being destroyed. It performs the following steps: Checks if the m_onDestroy action is set to a non-null value. If the m_onDestroy action is not null, it invokes the action, executing the destroy logic. If the m_onDestroy action is null and the m_isHandlingDisabled flag is false, it logs an error message to the Unity console using Debug.LogError. This error message indicates that the destroy handler was not set properly. Overall, this code provides a utility class that allows you to handle object destruction with a custom action. It provides a way to disable the destroy handling temporarily and also handles cases where the destroy action is not set properly, logging an error in such situations. Inheritance Object UtilityOnDestroyHandler Namespace : XRC.Core Assembly : cs.temp.dll.dll Syntax public class UtilityOnDestroyHandler : MonoBehaviour Fields m_onDestroy Declaration public Action m_onDestroy Field Value Type Description Action Methods DestroyWithoutHandling() Declaration public void DestroyWithoutHandling()"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | <XRC Package Template>",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . <!-- Headers should be listed in this order: Added, Changed, Deprecated, Removed, Fixed, Security --> [0.1.0] - YYYY-MM-DD Added List what new features were added Changed List changes in existing functionality Deprecated List soon-to-be removed features Removed List removed features Fixed List any bug fixes Security List vulnerabilities"
  },
  "index.html": {
    "href": "index.html",
    "title": "XRC Core | <XRC Package Template>",
    "keywords": "XRC Core Overview Provide a brief, high-level explanation of the package. Package contents Include the location of important files you want the user to know about. For example, if this is a sample package containing textures, models, and materials separated by sample group, you might want to provide the folder location of each group. Installation instructions You can point to the official Package Manager installation instructions, but if you have any special installation requirements, such as installing samples, add them here. Requirements This is a good place to add hardware or software requirements, including which versions of the Unity Editor this package is compatible with. Limitations If your package has any known limitations, you can list them here. If not, or if the limitations are trivial, exclude this section. Workflows Include a list of steps that the user can easily follow that demonstrates how to use the feature. You can include screenshots to help describe how to use the feature. Advanced topics This is where you can provide detailed information about what you are providing to users. This is ideal if you don’t want to overwhelm the user with too much information up front. Reference If you have a user interface with a lot of properties, you can provide the details in a reference section. Using tables is a good way to provide quick access to specific property descriptions. Samples For packages that include sample files, you can include detailed information on how the user can use these sample files in their projects and scenes. Tutorials If you want to provide walkthroughs for complicated procedures, you can also add them here. Use step-by-step instructions and include images if they can help the user understand."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| <XRC Package Template>",
    "keywords": "MIT License Copyright (c) 2023 XR Collaboratory Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "license/Third Party Notices.html": {
    "href": "license/Third Party Notices.html",
    "title": "This package contains third-party software components governed by the license(s) indicated below: | <XRC Package Template>",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: None"
  }
}